# -*- coding: utf-8 -*-
"""
@protect name:Contra
@author:DuckQuick
@email: m18834164553@163.com
@time:2018-10-5
@github ID:DuckQuick
"""
"""
pygame.display.get_active() #检查是否显示在屏幕上而没有被隐藏和最小化
pygame.display.iconify() #最小化surface窗口
"""
import sys
import pygame

LEFT = 1
RIGHT = -1
UP = 1
DOWN = -1
FLAT = 0
Bitcode = 0

class Player(pygame.sprite.Sprite):
	
	def __init__(self):
		'''
		初始化主要参数
		'''
		super().__init__()
		self.height = 50 #人物高度
		self.width = 30	#人物宽度
		self.face_left = RIGHT #人物面对方向
		self.face_top = FLAT #同上
		#加载图片(未完成：预加载至缓冲区以减少损耗)
		self.image01L = pygame.image.load('./Pic/hero01L.png').convert_alpha()
		self.image01R = pygame.image.load('./Pic/hero01R.png').convert_alpha()
		self.image01LU = pygame.image.load('./Pic/hero01LU.png').convert_alpha()
		self.image01LD = pygame.image.load('./Pic/hero01LD.png').convert_alpha()
		self.image01RU = pygame.image.load('./Pic/hero01RU.png').convert_alpha()
		self.image01RD = pygame.image.load('./Pic/hero01RD.png').convert_alpha()
		self.image = self.image01R
		self.pos = self.rect = self.image.get_rect()

	def sport(self,key):
		'''
		键盘按键移动模块
		'''
		#跳跃时间(未完成：全局变量更换为局部变量)
		global jump_time
		global drop_time

		if self.face_left == LEFT and self.face_top == FLAT:
			self.image = self.image01L
		elif self.face_left == LEFT and self.face_top == UP:
			self.image = self.image01LU
		elif self.face_left == LEFT and self.face_top == DOWN:
			self.image = self.image01LD
		elif self.face_left == RIGHT and self.face_top == FLAT:
			self.image = self.image01R
		elif self.face_left == RIGHT and self.face_top == UP:
			self.image = self.image01RU
		elif self.face_left == RIGHT and self.face_top == DOWN:
			self.image = self.image01RD

		if (key[pygame.K_a] or key[pygame.K_LEFT]) and not (key[pygame.K_d] or key[pygame.K_RIGHT]):
			self.pos.move_ip(-5,0)
			self.face_left = LEFT
		elif (key[pygame.K_d] or key[pygame.K_RIGHT]) and not (key[pygame.K_a] or key[pygame.K_LEFT]):
			self.pos.move_ip(5,0)
			self.face_left = RIGHT
		if (key[pygame.K_s] or key[pygame.K_DOWN]) and not (key[pygame.K_w] or key[pygame.K_UP]):
			self.face_top = DOWN
		elif (key[pygame.K_w] or key[pygame.K_UP]) and not (key[pygame.K_s] or key[pygame.K_DOWN]):
			self.face_top = UP
		elif not (key[pygame.K_w] or key[pygame.K_UP]) and not (key[pygame.K_s] or key[pygame.K_DOWN]):
			self.face_top = FLAT
		#跳跃时间变量，影响跳跃高度
		if key[pygame.K_k] and jump_time == 0 and drop_time == 0:
			jump_time = 10
			drop_time = jump_time
		#防止人物跑出屏幕
		if self.pos.left < 0:
			self.pos.left = 0
		elif self.pos.right > screen_width:
			self.pos.right = screen_width
		if self.pos.top <= 0:
			self.pos.top = 0
		elif self.pos.bottom >= screen_height:
			self.pos.bottom = screen_height

	def life(self,alive):
		'''
		生命模块(未完成)
		'''
		if alive == False and Bitcode > 0:
			self.pos.move_ip(-hero.pos.left + 20,screen_height)
		elif alive == True and Bitcode > 0:
			pass
		else:
			pass

class Enemy(pygame.sprite.Sprite):
	def __init__(self):
		super().__init__()
		self.height = 50
		self.width = 30
		self.surf = pygame.Surface((self.width,self.height))
		self.surf.fill((255,255,255))
		self.pos = self.rect = self.surf.get_rect(center=(500,200))

	def sport(self):
		self.pos.move_ip(-1,0)
		if self.pos.right < 0:
			self.kill()

class Map(pygame.sprite.Sprite):
	def __init__(self):
		super().__init__()

	def background():
		"""
		背景设置
		"""
		global screen
		global screen_width
		global screen_height
		global background
		screen_width = 500
		screen_height = 300
		screen = pygame.display.set_mode((screen_width,screen_height))
		background = pygame.Surface(screen.get_size())
		background.fill((135,206,250))

class Bullet(pygame.sprite.Sprite):
	def __init__(self):
		super().__init__()

		self.pos_left = hero.pos.left
		self.pos_top = hero.pos.top + 20

		self.image01L = pygame.image.load('./Pic/bullet01L.png').convert_alpha()
		self.image01R = pygame.image.load('./Pic/bullet01R.png').convert_alpha()
		self.image01U = pygame.image.load('./Pic/bullet01U.png').convert_alpha()
		self.image01D = pygame.image.load('./Pic/bullet01D.png').convert_alpha()
		#子弹方向和高度和速度设置
		if hero.face_left == LEFT and hero.face_top == FLAT:
			self.image = self.image01L
			self.speed_left = -2
			self.speed_top = 0
			self.pos_left = hero.pos.left
			self.pos_top = hero.pos.top + 20
		elif hero.face_left == RIGHT and hero.face_top == FLAT:
			self.image = self.image01R
			self.speed_left = 2
			self.speed_top = 0
			self.pos_left = hero.pos.left + hero.width
			self.pos_top = hero.pos.top + 20
		elif hero.face_top == UP:
			self.image = self.image01U
			self.speed_left = 0
			self.speed_top = -2
			self.pos_left = hero.pos.left + hero.width / 2
			self.pos_top = hero.pos.top
		elif hero.face_top == DOWN:
			self.image = self.image01D
			self.speed_left = 0
			self.speed_top = 2
			self.pos_left = hero.pos.left + hero.width / 2
			self.pos_top = hero.pos.top + hero.height
		#asurf = pygame.image.load(os.path.join('data', 'bla.png'))
		self.image.set_colorkey((255,255,255),pygame.RLEACCEL)
		self.pos = self.rect = self.image.get_rect(center=(self.pos_left,self.pos_top))

	def sport(self):
		self.pos.move_ip(self.speed_left,self.speed_top)
		screen.blit(bullet.image,bullet.pos)

class Start(pygame.sprite.Sprite):
	def __init__(self):
		super().__init__()
		self.text = start_font.render("Press q to play",False,(0,0,0))

	def sport(self):
		screen.blit(self.text,(screen_width / 2,screen_height / 2))
		
'''
主函数入口
'''
pygame.init()
#pygame.display.init()
if pygame.display.get_init():
	#初始设置
	start_font = pygame.font.SysFont('arial',18, False, False)
	clock = pygame.time.Clock()
	Done = True
    
	pygame.display.set_caption('Game')
    #pygame.display.set_icon() #设置窗口执行时的图标,32*32像素
	Map.background()

	ADDENEMYT = pygame.USEREVENT + 1
	pygame.time.set_timer(ADDENEMYT,2500) #2500毫秒触发
	jump_time = 0
	drop_time = 0

	hero = Player()
	hero.alive = False

	enemy_group = pygame.sprite.Group()
	bullet_group = pygame.sprite.Group()
	all_sprites = pygame.sprite.Group()
	all_sprites.add(hero)

	while Done:
		#事件相关
		for events in pygame.event.get():
			#按键设置
			if events.type == pygame.QUIT:
				Done = False
			if events.type == pygame.KEYDOWN:
				if events.key == pygame.K_ESCAPE:
					Done = False
				if Bitcode == 0:
					if events.key == pygame.K_q:
						Bitcode = 3
				if Bitcode > 0:
					if events.key == pygame.K_j:
						new_bullet = Bullet()
						bullet_group.add(new_bullet)
						all_sprites.add(new_bullet)
			if Bitcode > 0:
				if events.type == ADDENEMYT:
					new_enemy = Enemy()
					enemy_group.add(new_enemy)
					all_sprites.add(new_enemy)

		#屏幕刷新
		if Bitcode == 0:
			screen.fill((255,255,255))
			Start().sport()
		if Bitcode > 0:
			screen.blit(background,(0,0))
			#英雄更新
			hero.life(hero.alive)
			if hero.alive == False:
				hero.alive = True
			key = pygame.key.get_pressed()
			hero.sport(key)
			screen.blit(hero.image,hero.pos)
			#敌人更新
			for enemy in enemy_group:
				enemy.sport()
				screen.blit(enemy.surf,enemy.pos)
			#子弹更新
			for bullet in bullet_group:
				bullet.sport()
				if bullet.pos.left < 0:
					bullet.kill()
			#撞击判定
			if pygame.sprite.spritecollideany(hero,enemy_group):
				Bitcode = Bitcode - 1
				if Bitcode <= 0: #未知执行
					pass
				elif Bitcode > 0:
					hero.alive = False
					hero.life(hero.alive)
			#跳跃判定
			if jump_time > 0 and drop_time != 0:
				hero.pos.move_ip(0,-10)
				jump_time = jump_time - 1
			if drop_time > 0 and jump_time == 0:
				hero.pos.move_ip(0,10)
				drop_time = drop_time - 1

		#总系统相关
		pygame.display.flip()
		clock.tick(40)

pygame.quit()
sys.exit(0)
